// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/v1/welaw.proto

package grpc_welaw_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WelawSvc service

type WelawSvcClient interface {
	// Auth
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserReply, error)
	MakeToken(ctx context.Context, in *MakeTokenRequest, opts ...grpc.CallOption) (*MakeTokenReply, error)
	LoginAs(ctx context.Context, in *LoginAsRequest, opts ...grpc.CallOption) (*LoginAsReply, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error)
	// Ballot
	CreateVote(ctx context.Context, in *CreateVoteRequest, opts ...grpc.CallOption) (*CreateVoteReply, error)
	UpdateVote(ctx context.Context, in *UpdateVoteRequest, opts ...grpc.CallOption) (*UpdateVoteReply, error)
	GetVote(ctx context.Context, in *GetVoteRequest, opts ...grpc.CallOption) (*GetVoteReply, error)
	DeleteVote(ctx context.Context, in *DeleteVoteRequest, opts ...grpc.CallOption) (*DeleteVoteReply, error)
	ListVotes(ctx context.Context, in *ListVotesRequest, opts ...grpc.CallOption) (*ListVotesReply, error)
	// Law
	CreateLaw(ctx context.Context, in *CreateLawRequest, opts ...grpc.CallOption) (*CreateLawReply, error)
	// rpc ListVersions(ListVersionsRequest) returns (ListVersionsReply) {}
	GetLaw(ctx context.Context, in *GetLawRequest, opts ...grpc.CallOption) (*GetLawReply, error)
	ListLaws(ctx context.Context, in *ListLawsRequest, opts ...grpc.CallOption) (*ListLawsReply, error)
	// Upstream
	CreateUpstream(ctx context.Context, in *CreateUpstreamRequest, opts ...grpc.CallOption) (*CreateUpstreamReply, error)
	GetUpstream(ctx context.Context, in *GetUpstreamRequest, opts ...grpc.CallOption) (*GetUpstreamReply, error)
	ListUpstreams(ctx context.Context, in *ListUpstreamsRequest, opts ...grpc.CallOption) (*ListUpstreamsReply, error)
	UpdateUpstream(ctx context.Context, in *UpdateUpstreamRequest, opts ...grpc.CallOption) (*UpdateUpstreamReply, error)
	// User
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserReply, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersReply, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserReply, error)
}

type welawSvcClient struct {
	cc *grpc.ClientConn
}

func NewWelawSvcClient(cc *grpc.ClientConn) WelawSvcClient {
	return &welawSvcClient{cc}
}

func (c *welawSvcClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welawSvcClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserReply, error) {
	out := new(LoginUserReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/LoginUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welawSvcClient) MakeToken(ctx context.Context, in *MakeTokenRequest, opts ...grpc.CallOption) (*MakeTokenReply, error) {
	out := new(MakeTokenReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/MakeToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welawSvcClient) LoginAs(ctx context.Context, in *LoginAsRequest, opts ...grpc.CallOption) (*LoginAsReply, error) {
	out := new(LoginAsReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/LoginAs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welawSvcClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welawSvcClient) CreateVote(ctx context.Context, in *CreateVoteRequest, opts ...grpc.CallOption) (*CreateVoteReply, error) {
	out := new(CreateVoteReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/CreateVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welawSvcClient) UpdateVote(ctx context.Context, in *UpdateVoteRequest, opts ...grpc.CallOption) (*UpdateVoteReply, error) {
	out := new(UpdateVoteReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/UpdateVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welawSvcClient) GetVote(ctx context.Context, in *GetVoteRequest, opts ...grpc.CallOption) (*GetVoteReply, error) {
	out := new(GetVoteReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/GetVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welawSvcClient) DeleteVote(ctx context.Context, in *DeleteVoteRequest, opts ...grpc.CallOption) (*DeleteVoteReply, error) {
	out := new(DeleteVoteReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/DeleteVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welawSvcClient) ListVotes(ctx context.Context, in *ListVotesRequest, opts ...grpc.CallOption) (*ListVotesReply, error) {
	out := new(ListVotesReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/ListVotes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welawSvcClient) CreateLaw(ctx context.Context, in *CreateLawRequest, opts ...grpc.CallOption) (*CreateLawReply, error) {
	out := new(CreateLawReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/CreateLaw", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welawSvcClient) GetLaw(ctx context.Context, in *GetLawRequest, opts ...grpc.CallOption) (*GetLawReply, error) {
	out := new(GetLawReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/GetLaw", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welawSvcClient) ListLaws(ctx context.Context, in *ListLawsRequest, opts ...grpc.CallOption) (*ListLawsReply, error) {
	out := new(ListLawsReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/ListLaws", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welawSvcClient) CreateUpstream(ctx context.Context, in *CreateUpstreamRequest, opts ...grpc.CallOption) (*CreateUpstreamReply, error) {
	out := new(CreateUpstreamReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/CreateUpstream", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welawSvcClient) GetUpstream(ctx context.Context, in *GetUpstreamRequest, opts ...grpc.CallOption) (*GetUpstreamReply, error) {
	out := new(GetUpstreamReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/GetUpstream", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welawSvcClient) ListUpstreams(ctx context.Context, in *ListUpstreamsRequest, opts ...grpc.CallOption) (*ListUpstreamsReply, error) {
	out := new(ListUpstreamsReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/ListUpstreams", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welawSvcClient) UpdateUpstream(ctx context.Context, in *UpdateUpstreamRequest, opts ...grpc.CallOption) (*UpdateUpstreamReply, error) {
	out := new(UpdateUpstreamReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/UpdateUpstream", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welawSvcClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserReply, error) {
	out := new(CreateUserReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welawSvcClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welawSvcClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersReply, error) {
	out := new(ListUsersReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/ListUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welawSvcClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserReply, error) {
	out := new(UpdateUserReply)
	err := grpc.Invoke(ctx, "/grpc.welaw.v1.WelawSvc/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WelawSvc service

type WelawSvcServer interface {
	// Auth
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserReply, error)
	MakeToken(context.Context, *MakeTokenRequest) (*MakeTokenReply, error)
	LoginAs(context.Context, *LoginAsRequest) (*LoginAsReply, error)
	Logout(context.Context, *LogoutRequest) (*LogoutReply, error)
	// Ballot
	CreateVote(context.Context, *CreateVoteRequest) (*CreateVoteReply, error)
	UpdateVote(context.Context, *UpdateVoteRequest) (*UpdateVoteReply, error)
	GetVote(context.Context, *GetVoteRequest) (*GetVoteReply, error)
	DeleteVote(context.Context, *DeleteVoteRequest) (*DeleteVoteReply, error)
	ListVotes(context.Context, *ListVotesRequest) (*ListVotesReply, error)
	// Law
	CreateLaw(context.Context, *CreateLawRequest) (*CreateLawReply, error)
	// rpc ListVersions(ListVersionsRequest) returns (ListVersionsReply) {}
	GetLaw(context.Context, *GetLawRequest) (*GetLawReply, error)
	ListLaws(context.Context, *ListLawsRequest) (*ListLawsReply, error)
	// Upstream
	CreateUpstream(context.Context, *CreateUpstreamRequest) (*CreateUpstreamReply, error)
	GetUpstream(context.Context, *GetUpstreamRequest) (*GetUpstreamReply, error)
	ListUpstreams(context.Context, *ListUpstreamsRequest) (*ListUpstreamsReply, error)
	UpdateUpstream(context.Context, *UpdateUpstreamRequest) (*UpdateUpstreamReply, error)
	// User
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserReply, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersReply, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserReply, error)
}

func RegisterWelawSvcServer(s *grpc.Server, srv WelawSvcServer) {
	s.RegisterService(&_WelawSvc_serviceDesc, srv)
}

func _WelawSvc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelawSvc_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelawSvc_MakeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).MakeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/MakeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).MakeToken(ctx, req.(*MakeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelawSvc_LoginAs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginAsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).LoginAs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/LoginAs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).LoginAs(ctx, req.(*LoginAsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelawSvc_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelawSvc_CreateVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).CreateVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/CreateVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).CreateVote(ctx, req.(*CreateVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelawSvc_UpdateVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).UpdateVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/UpdateVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).UpdateVote(ctx, req.(*UpdateVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelawSvc_GetVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).GetVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/GetVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).GetVote(ctx, req.(*GetVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelawSvc_DeleteVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).DeleteVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/DeleteVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).DeleteVote(ctx, req.(*DeleteVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelawSvc_ListVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).ListVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/ListVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).ListVotes(ctx, req.(*ListVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelawSvc_CreateLaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).CreateLaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/CreateLaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).CreateLaw(ctx, req.(*CreateLawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelawSvc_GetLaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).GetLaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/GetLaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).GetLaw(ctx, req.(*GetLawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelawSvc_ListLaws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLawsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).ListLaws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/ListLaws",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).ListLaws(ctx, req.(*ListLawsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelawSvc_CreateUpstream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUpstreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).CreateUpstream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/CreateUpstream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).CreateUpstream(ctx, req.(*CreateUpstreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelawSvc_GetUpstream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpstreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).GetUpstream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/GetUpstream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).GetUpstream(ctx, req.(*GetUpstreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelawSvc_ListUpstreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUpstreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).ListUpstreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/ListUpstreams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).ListUpstreams(ctx, req.(*ListUpstreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelawSvc_UpdateUpstream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUpstreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).UpdateUpstream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/UpdateUpstream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).UpdateUpstream(ctx, req.(*UpdateUpstreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelawSvc_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelawSvc_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelawSvc_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WelawSvc_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelawSvcServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.welaw.v1.WelawSvc/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelawSvcServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WelawSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.welaw.v1.WelawSvc",
	HandlerType: (*WelawSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _WelawSvc_Login_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _WelawSvc_LoginUser_Handler,
		},
		{
			MethodName: "MakeToken",
			Handler:    _WelawSvc_MakeToken_Handler,
		},
		{
			MethodName: "LoginAs",
			Handler:    _WelawSvc_LoginAs_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _WelawSvc_Logout_Handler,
		},
		{
			MethodName: "CreateVote",
			Handler:    _WelawSvc_CreateVote_Handler,
		},
		{
			MethodName: "UpdateVote",
			Handler:    _WelawSvc_UpdateVote_Handler,
		},
		{
			MethodName: "GetVote",
			Handler:    _WelawSvc_GetVote_Handler,
		},
		{
			MethodName: "DeleteVote",
			Handler:    _WelawSvc_DeleteVote_Handler,
		},
		{
			MethodName: "ListVotes",
			Handler:    _WelawSvc_ListVotes_Handler,
		},
		{
			MethodName: "CreateLaw",
			Handler:    _WelawSvc_CreateLaw_Handler,
		},
		{
			MethodName: "GetLaw",
			Handler:    _WelawSvc_GetLaw_Handler,
		},
		{
			MethodName: "ListLaws",
			Handler:    _WelawSvc_ListLaws_Handler,
		},
		{
			MethodName: "CreateUpstream",
			Handler:    _WelawSvc_CreateUpstream_Handler,
		},
		{
			MethodName: "GetUpstream",
			Handler:    _WelawSvc_GetUpstream_Handler,
		},
		{
			MethodName: "ListUpstreams",
			Handler:    _WelawSvc_ListUpstreams_Handler,
		},
		{
			MethodName: "UpdateUpstream",
			Handler:    _WelawSvc_UpdateUpstream_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _WelawSvc_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _WelawSvc_GetUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _WelawSvc_ListUsers_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _WelawSvc_UpdateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/welaw.proto",
}

func init() { proto.RegisterFile("api/v1/welaw.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 471 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x95, 0x5d, 0xef, 0xd2, 0x30,
	0x14, 0xc6, 0xbd, 0xf1, 0x2f, 0xd6, 0x60, 0xb4, 0xc6, 0x0b, 0x07, 0x82, 0xa0, 0xd7, 0x23, 0xe8,
	0x27, 0x20, 0x92, 0x2c, 0x31, 0x23, 0x31, 0x22, 0x1a, 0x13, 0x6f, 0x0a, 0x9e, 0x20, 0x61, 0xd2,
	0xb9, 0x76, 0x2c, 0x7e, 0x0c, 0xbf, 0xb1, 0x59, 0xdf, 0x56, 0xb6, 0x9e, 0x79, 0xc9, 0xf3, 0x3c,
	0xfc, 0x7a, 0xce, 0x49, 0x4f, 0x47, 0x28, 0xcb, 0x4f, 0x8b, 0xeb, 0x72, 0x51, 0x41, 0xc6, 0xaa,
	0x38, 0x2f, 0xb8, 0xe4, 0x74, 0x78, 0x2c, 0xf2, 0x43, 0xac, 0x95, 0xeb, 0x32, 0x7a, 0x6a, 0x22,
	0xac, 0x94, 0x3f, 0x75, 0x22, 0x7a, 0x66, 0xa4, 0x3d, 0xcb, 0x32, 0x2e, 0x8d, 0xf8, 0xc4, 0x88,
	0x0e, 0xe4, 0xfe, 0x59, 0x0a, 0x28, 0x8c, 0xf4, 0xdc, 0x4a, 0xb9, 0x90, 0x05, 0xb0, 0x5f, 0x5a,
	0x7e, 0xfb, 0x77, 0x48, 0x06, 0x5f, 0xeb, 0x03, 0xb7, 0xd7, 0x03, 0x5d, 0x91, 0xfb, 0x29, 0x3f,
	0x9e, 0x2e, 0x74, 0x14, 0xdf, 0x54, 0x12, 0x2b, 0xf5, 0x13, 0xfc, 0x2e, 0x41, 0xc8, 0xe8, 0x45,
	0xd8, 0xcc, 0xb3, 0x3f, 0xf3, 0x7b, 0x74, 0x43, 0x1e, 0xaa, 0xdf, 0x3b, 0x01, 0x05, 0x9d, 0x86,
	0x92, 0xb5, 0x63, 0x51, 0x2f, 0xf1, 0x80, 0xc3, 0x6d, 0xd8, 0x19, 0x3e, 0xf3, 0x33, 0x5c, 0x3a,
	0x38, 0xe7, 0x60, 0x38, 0x2f, 0xa0, 0x71, 0x09, 0x79, 0xa0, 0x8e, 0x58, 0x09, 0x1a, 0x3c, 0x7a,
	0x25, 0x2c, 0x6a, 0x84, 0xd9, 0x1a, 0xb4, 0x26, 0x77, 0x29, 0x3f, 0xf2, 0x52, 0xd2, 0x71, 0x37,
	0xc8, 0x4b, 0x69, 0x31, 0x11, 0xe2, 0x6a, 0xca, 0x47, 0x42, 0xde, 0x17, 0xc0, 0x24, 0x7c, 0xe1,
	0x12, 0xe8, 0xab, 0x56, 0xb6, 0xb1, 0x2c, 0x6d, 0xd2, 0x93, 0x70, 0xc4, 0x5d, 0xfe, 0x03, 0x23,
	0x36, 0x16, 0x46, 0xf4, 0x13, 0x6e, 0x64, 0x09, 0x48, 0x85, 0x6b, 0x8f, 0xcc, 0xe8, 0xd8, 0xc8,
	0x9c, 0xed, 0x4a, 0x5b, 0x43, 0x06, 0x48, 0x69, 0x8d, 0x85, 0x95, 0xe6, 0x27, 0x9a, 0xbb, 0x76,
	0x12, 0xea, 0x10, 0xd1, 0xbd, 0x6b, 0xd6, 0x41, 0xef, 0x5a, 0x13, 0x70, 0x38, 0x3d, 0xd0, 0x94,
	0x55, 0x1d, 0x9c, 0x73, 0x30, 0x9c, 0x17, 0x70, 0x57, 0x24, 0x01, 0x59, 0xb3, 0xc6, 0xdd, 0xc1,
	0x78, 0xa0, 0x08, 0x71, 0x35, 0xe5, 0x03, 0x19, 0xd4, 0x85, 0xa6, 0xac, 0x12, 0x74, 0x12, 0xe8,
	0xa0, 0x36, 0x2c, 0x69, 0x8c, 0xfa, 0x9a, 0xf5, 0x9d, 0x3c, 0xd6, 0x55, 0xee, 0xcc, 0x1b, 0x40,
	0xdf, 0x04, 0x9b, 0xb0, 0xb6, 0xe5, 0xce, 0xff, 0x93, 0xd2, 0xf4, 0x2d, 0x79, 0x94, 0x80, 0x74,
	0xe8, 0x59, 0xb7, 0xad, 0x36, 0x77, 0xda, 0x17, 0xd1, 0xd0, 0x6f, 0x64, 0x58, 0x77, 0x61, 0x65,
	0x41, 0x5f, 0x07, 0x7a, 0x74, 0xae, 0x05, 0xcf, 0xfa, 0x43, 0x6e, 0x1a, 0xfa, 0xb6, 0xa3, 0xd3,
	0xb8, 0xb5, 0xb1, 0x69, 0xb4, 0x53, 0xad, 0xd5, 0x56, 0x0f, 0x61, 0x78, 0xb5, 0xfd, 0x97, 0x70,
	0xd2, 0x93, 0xf0, 0x17, 0x51, 0xe1, 0x02, 0x8b, 0xe8, 0xb3, 0x46, 0x98, 0x7d, 0xb3, 0x36, 0xb5,
	0x14, 0x5e, 0x1b, 0xe5, 0xf4, 0xad, 0x8d, 0x09, 0xb4, 0x9e, 0x9c, 0x60, 0xa7, 0x8d, 0xd5, 0xff,
	0xe4, 0x78, 0x05, 0xee, 0xef, 0xd4, 0xa7, 0xe9, 0xdd, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c,
	0xf4, 0x2f, 0xed, 0x23, 0x07, 0x00, 0x00,
}
