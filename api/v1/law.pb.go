// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/v1/law.proto

package grpc_welaw_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ListLawsOptions_RequestType int32

const (
	ListLawsOptions_USER_LAWS       ListLawsOptions_RequestType = 0
	ListLawsOptions_UPSTREAM_LAWS   ListLawsOptions_RequestType = 1
	ListLawsOptions_SEARCH          ListLawsOptions_RequestType = 2
	ListLawsOptions_LAW_BRANCHES    ListLawsOptions_RequestType = 3
	ListLawsOptions_BRANCH_VERSIONS ListLawsOptions_RequestType = 4
)

var ListLawsOptions_RequestType_name = map[int32]string{
	0: "USER_LAWS",
	1: "UPSTREAM_LAWS",
	2: "SEARCH",
	3: "LAW_BRANCHES",
	4: "BRANCH_VERSIONS",
}
var ListLawsOptions_RequestType_value = map[string]int32{
	"USER_LAWS":       0,
	"UPSTREAM_LAWS":   1,
	"SEARCH":          2,
	"LAW_BRANCHES":    3,
	"BRANCH_VERSIONS": 4,
}

func (x ListLawsOptions_RequestType) String() string {
	return proto.EnumName(ListLawsOptions_RequestType_name, int32(x))
}
func (ListLawsOptions_RequestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor4, []int{20, 0}
}

type LawSet struct {
	Law     *Law     `protobuf:"bytes,1,opt,name=law" json:"law,omitempty"`
	Branch  *Branch  `protobuf:"bytes,2,opt,name=branch" json:"branch,omitempty"`
	Version *Version `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	Author  *Author  `protobuf:"bytes,4,opt,name=author" json:"author,omitempty"`
	User    *User    `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
}

func (m *LawSet) Reset()                    { *m = LawSet{} }
func (m *LawSet) String() string            { return proto.CompactTextString(m) }
func (*LawSet) ProtoMessage()               {}
func (*LawSet) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *LawSet) GetLaw() *Law {
	if m != nil {
		return m.Law
	}
	return nil
}

func (m *LawSet) GetBranch() *Branch {
	if m != nil {
		return m.Branch
	}
	return nil
}

func (m *LawSet) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *LawSet) GetAuthor() *Author {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *LawSet) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type Author struct {
	Uid        string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	Username   string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Email      string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	FullName   string `protobuf:"bytes,4,opt,name=full_name,json=fullName" json:"full_name,omitempty"`
	PictureUrl string `protobuf:"bytes,5,opt,name=picture_url,json=pictureUrl" json:"picture_url,omitempty"`
}

func (m *Author) Reset()                    { *m = Author{} }
func (m *Author) String() string            { return proto.CompactTextString(m) }
func (*Author) ProtoMessage()               {}
func (*Author) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *Author) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Author) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Author) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Author) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *Author) GetPictureUrl() string {
	if m != nil {
		return m.PictureUrl
	}
	return ""
}

type L struct {
	Uid      string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	UserId   string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Upstream string `protobuf:"bytes,3,opt,name=upstream" json:"upstream,omitempty"`
	// string upstream_group = 4;
	Ident       string     `protobuf:"bytes,5,opt,name=ident" json:"ident,omitempty"`
	Title       string     `protobuf:"bytes,6,opt,name=title" json:"title,omitempty"`
	ShortTitle  string     `protobuf:"bytes,7,opt,name=short_title,json=shortTitle" json:"short_title,omitempty"`
	Description string     `protobuf:"bytes,8,opt,name=description" json:"description,omitempty"`
	Branch      *Branch    `protobuf:"bytes,12,opt,name=branch" json:"branch,omitempty"`
	Branches    []*Branch  `protobuf:"bytes,13,rep,name=branches" json:"branches,omitempty"`
	Version     *Version   `protobuf:"bytes,14,opt,name=version" json:"version,omitempty"`
	Versions    []*Version `protobuf:"bytes,15,rep,name=versions" json:"versions,omitempty"`
	User        *User      `protobuf:"bytes,16,opt,name=user" json:"user,omitempty"`
	Parent      *Law       `protobuf:"bytes,17,opt,name=parent" json:"parent,omitempty"`
	Url         string     `protobuf:"bytes,18,opt,name=url" json:"url,omitempty"`
	BranchName  string     `protobuf:"bytes,4,opt,name=branch_name,json=branchName" json:"branch_name,omitempty"`
}

func (m *L) Reset()                    { *m = L{} }
func (m *L) String() string            { return proto.CompactTextString(m) }
func (*L) ProtoMessage()               {}
func (*L) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *L) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *L) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *L) GetUpstream() string {
	if m != nil {
		return m.Upstream
	}
	return ""
}

func (m *L) GetIdent() string {
	if m != nil {
		return m.Ident
	}
	return ""
}

func (m *L) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *L) GetShortTitle() string {
	if m != nil {
		return m.ShortTitle
	}
	return ""
}

func (m *L) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *L) GetBranch() *Branch {
	if m != nil {
		return m.Branch
	}
	return nil
}

func (m *L) GetBranches() []*Branch {
	if m != nil {
		return m.Branches
	}
	return nil
}

func (m *L) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *L) GetVersions() []*Version {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *L) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *L) GetParent() *Law {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *L) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *L) GetBranchName() string {
	if m != nil {
		return m.BranchName
	}
	return ""
}

type Law struct {
	Uid      string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	UserId   string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Upstream string `protobuf:"bytes,3,opt,name=upstream" json:"upstream,omitempty"`
	// string upstream_group = 4;
	Ident       string     `protobuf:"bytes,5,opt,name=ident" json:"ident,omitempty"`
	Title       string     `protobuf:"bytes,6,opt,name=title" json:"title,omitempty"`
	ShortTitle  string     `protobuf:"bytes,7,opt,name=short_title,json=shortTitle" json:"short_title,omitempty"`
	Description string     `protobuf:"bytes,8,opt,name=description" json:"description,omitempty"`
	Branch      *Branch    `protobuf:"bytes,12,opt,name=branch" json:"branch,omitempty"`
	Branches    []*Branch  `protobuf:"bytes,13,rep,name=branches" json:"branches,omitempty"`
	Version     *Version   `protobuf:"bytes,14,opt,name=version" json:"version,omitempty"`
	Versions    []*Version `protobuf:"bytes,15,rep,name=versions" json:"versions,omitempty"`
	User        *User      `protobuf:"bytes,16,opt,name=user" json:"user,omitempty"`
	Parent      *Law       `protobuf:"bytes,17,opt,name=parent" json:"parent,omitempty"`
	Url         string     `protobuf:"bytes,18,opt,name=url" json:"url,omitempty"`
}

func (m *Law) Reset()                    { *m = Law{} }
func (m *Law) String() string            { return proto.CompactTextString(m) }
func (*Law) ProtoMessage()               {}
func (*Law) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *Law) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Law) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Law) GetUpstream() string {
	if m != nil {
		return m.Upstream
	}
	return ""
}

func (m *Law) GetIdent() string {
	if m != nil {
		return m.Ident
	}
	return ""
}

func (m *Law) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Law) GetShortTitle() string {
	if m != nil {
		return m.ShortTitle
	}
	return ""
}

func (m *Law) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Law) GetBranch() *Branch {
	if m != nil {
		return m.Branch
	}
	return nil
}

func (m *Law) GetBranches() []*Branch {
	if m != nil {
		return m.Branches
	}
	return nil
}

func (m *Law) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *Law) GetVersions() []*Version {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *Law) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Law) GetParent() *Law {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *Law) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type Branch struct {
	Uid    string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	LawId  string `protobuf:"bytes,2,opt,name=law_id,json=lawId" json:"law_id,omitempty"`
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Name   string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *Branch) Reset()                    { *m = Branch{} }
func (m *Branch) String() string            { return proto.CompactTextString(m) }
func (*Branch) ProtoMessage()               {}
func (*Branch) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *Branch) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Branch) GetLawId() string {
	if m != nil {
		return m.LawId
	}
	return ""
}

func (m *Branch) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Branch) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Version struct {
	Uid           string                     `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	BranchId      string                     `protobuf:"bytes,2,opt,name=branch_id,json=branchId" json:"branch_id,omitempty"`
	UserId        string                     `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Version       uint32                     `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	Hash          string                     `protobuf:"bytes,5,opt,name=hash" json:"hash,omitempty"`
	Description   string                     `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	Msg           string                     `protobuf:"bytes,7,opt,name=msg" json:"msg,omitempty"`
	Body          string                     `protobuf:"bytes,8,opt,name=body" json:"body,omitempty"`
	Label         string                     `protobuf:"bytes,9,opt,name=label" json:"label,omitempty"`
	PublishedAt   *google_protobuf.Timestamp `protobuf:"bytes,11,opt,name=published_at,json=publishedAt" json:"published_at,omitempty"`
	Tags          []*LawTag                  `protobuf:"bytes,12,rep,name=tags" json:"tags,omitempty"`
	Tag_1         string                     `protobuf:"bytes,13,opt,name=tag_1,json=tag1" json:"tag_1,omitempty"`
	Tag_2         string                     `protobuf:"bytes,14,opt,name=tag_2,json=tag2" json:"tag_2,omitempty"`
	Tag_3         string                     `protobuf:"bytes,15,opt,name=tag_3,json=tag3" json:"tag_3,omitempty"`
	Tag_4         string                     `protobuf:"bytes,16,opt,name=tag_4,json=tag4" json:"tag_4,omitempty"`
	Yays          int32                      `protobuf:"varint,17,opt,name=yays" json:"yays,omitempty"`
	Nays          int32                      `protobuf:"varint,18,opt,name=nays" json:"nays,omitempty"`
	HasVoted      bool                       `protobuf:"varint,19,opt,name=has_voted,json=hasVoted" json:"has_voted,omitempty"`
	UpstreamGroup string                     `protobuf:"bytes,20,opt,name=upstream_group,json=upstreamGroup" json:"upstream_group,omitempty"`
	CommentCount  int32                      `protobuf:"varint,21,opt,name=comment_count,json=commentCount" json:"comment_count,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *Version) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Version) GetBranchId() string {
	if m != nil {
		return m.BranchId
	}
	return ""
}

func (m *Version) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Version) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Version) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Version) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Version) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Version) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Version) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Version) GetPublishedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.PublishedAt
	}
	return nil
}

func (m *Version) GetTags() []*LawTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Version) GetTag_1() string {
	if m != nil {
		return m.Tag_1
	}
	return ""
}

func (m *Version) GetTag_2() string {
	if m != nil {
		return m.Tag_2
	}
	return ""
}

func (m *Version) GetTag_3() string {
	if m != nil {
		return m.Tag_3
	}
	return ""
}

func (m *Version) GetTag_4() string {
	if m != nil {
		return m.Tag_4
	}
	return ""
}

func (m *Version) GetYays() int32 {
	if m != nil {
		return m.Yays
	}
	return 0
}

func (m *Version) GetNays() int32 {
	if m != nil {
		return m.Nays
	}
	return 0
}

func (m *Version) GetHasVoted() bool {
	if m != nil {
		return m.HasVoted
	}
	return false
}

func (m *Version) GetUpstreamGroup() string {
	if m != nil {
		return m.UpstreamGroup
	}
	return ""
}

func (m *Version) GetCommentCount() int32 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

type LawTag struct {
	Ident       string `protobuf:"bytes,1,opt,name=ident" json:"ident,omitempty"`
	Ranking     int32  `protobuf:"varint,2,opt,name=ranking" json:"ranking,omitempty"`
	NumberType  bool   `protobuf:"varint,3,opt,name=number_type,json=numberType" json:"number_type,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	StringValue string `protobuf:"bytes,5,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	NumberValue int32  `protobuf:"varint,6,opt,name=number_value,json=numberValue" json:"number_value,omitempty"`
	Description string `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
}

func (m *LawTag) Reset()                    { *m = LawTag{} }
func (m *LawTag) String() string            { return proto.CompactTextString(m) }
func (*LawTag) ProtoMessage()               {}
func (*LawTag) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *LawTag) GetIdent() string {
	if m != nil {
		return m.Ident
	}
	return ""
}

func (m *LawTag) GetRanking() int32 {
	if m != nil {
		return m.Ranking
	}
	return 0
}

func (m *LawTag) GetNumberType() bool {
	if m != nil {
		return m.NumberType
	}
	return false
}

func (m *LawTag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LawTag) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *LawTag) GetNumberValue() int32 {
	if m != nil {
		return m.NumberValue
	}
	return 0
}

func (m *LawTag) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type CreateLawOptions struct {
	Branch  string `protobuf:"bytes,1,opt,name=branch" json:"branch,omitempty"`
	Version uint32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *CreateLawOptions) Reset()                    { *m = CreateLawOptions{} }
func (m *CreateLawOptions) String() string            { return proto.CompactTextString(m) }
func (*CreateLawOptions) ProtoMessage()               {}
func (*CreateLawOptions) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *CreateLawOptions) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *CreateLawOptions) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type CreateLawsOptions struct {
	Branch  string `protobuf:"bytes,1,opt,name=branch" json:"branch,omitempty"`
	Version uint32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *CreateLawsOptions) Reset()                    { *m = CreateLawsOptions{} }
func (m *CreateLawsOptions) String() string            { return proto.CompactTextString(m) }
func (*CreateLawsOptions) ProtoMessage()               {}
func (*CreateLawsOptions) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *CreateLawsOptions) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *CreateLawsOptions) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type CreateLawRequest struct {
	LawSet *LawSet           `protobuf:"bytes,1,opt,name=law_set,json=lawSet" json:"law_set,omitempty"`
	Opts   *CreateLawOptions `protobuf:"bytes,2,opt,name=opts" json:"opts,omitempty"`
}

func (m *CreateLawRequest) Reset()                    { *m = CreateLawRequest{} }
func (m *CreateLawRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateLawRequest) ProtoMessage()               {}
func (*CreateLawRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *CreateLawRequest) GetLawSet() *LawSet {
	if m != nil {
		return m.LawSet
	}
	return nil
}

func (m *CreateLawRequest) GetOpts() *CreateLawOptions {
	if m != nil {
		return m.Opts
	}
	return nil
}

type CreateLawReply struct {
	LawSet *LawSet `protobuf:"bytes,1,opt,name=law_set,json=lawSet" json:"law_set,omitempty"`
	Err    string  `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *CreateLawReply) Reset()                    { *m = CreateLawReply{} }
func (m *CreateLawReply) String() string            { return proto.CompactTextString(m) }
func (*CreateLawReply) ProtoMessage()               {}
func (*CreateLawReply) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

func (m *CreateLawReply) GetLawSet() *LawSet {
	if m != nil {
		return m.LawSet
	}
	return nil
}

func (m *CreateLawReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type DeleteLawOptions struct {
	Branch  string `protobuf:"bytes,1,opt,name=branch" json:"branch,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteLawOptions) Reset()                    { *m = DeleteLawOptions{} }
func (m *DeleteLawOptions) String() string            { return proto.CompactTextString(m) }
func (*DeleteLawOptions) ProtoMessage()               {}
func (*DeleteLawOptions) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{11} }

func (m *DeleteLawOptions) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *DeleteLawOptions) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type DeleteLawRequest struct {
	Upstream string            `protobuf:"bytes,1,opt,name=upstream" json:"upstream,omitempty"`
	Ident    string            `protobuf:"bytes,2,opt,name=ident" json:"ident,omitempty"`
	Opts     *DeleteLawOptions `protobuf:"bytes,3,opt,name=opts" json:"opts,omitempty"`
}

func (m *DeleteLawRequest) Reset()                    { *m = DeleteLawRequest{} }
func (m *DeleteLawRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteLawRequest) ProtoMessage()               {}
func (*DeleteLawRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{12} }

func (m *DeleteLawRequest) GetUpstream() string {
	if m != nil {
		return m.Upstream
	}
	return ""
}

func (m *DeleteLawRequest) GetIdent() string {
	if m != nil {
		return m.Ident
	}
	return ""
}

func (m *DeleteLawRequest) GetOpts() *DeleteLawOptions {
	if m != nil {
		return m.Opts
	}
	return nil
}

type DeleteLawReply struct {
	Err string `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *DeleteLawReply) Reset()                    { *m = DeleteLawReply{} }
func (m *DeleteLawReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteLawReply) ProtoMessage()               {}
func (*DeleteLawReply) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{13} }

func (m *DeleteLawReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type DiffLawsOptions struct {
	OurBranch    string `protobuf:"bytes,1,opt,name=our_branch,json=ourBranch" json:"our_branch,omitempty"`
	OurVersion   string `protobuf:"bytes,2,opt,name=our_version,json=ourVersion" json:"our_version,omitempty"`
	TheirBranch  string `protobuf:"bytes,3,opt,name=their_branch,json=theirBranch" json:"their_branch,omitempty"`
	TheirVersion string `protobuf:"bytes,4,opt,name=their_version,json=theirVersion" json:"their_version,omitempty"`
}

func (m *DiffLawsOptions) Reset()                    { *m = DiffLawsOptions{} }
func (m *DiffLawsOptions) String() string            { return proto.CompactTextString(m) }
func (*DiffLawsOptions) ProtoMessage()               {}
func (*DiffLawsOptions) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{14} }

func (m *DiffLawsOptions) GetOurBranch() string {
	if m != nil {
		return m.OurBranch
	}
	return ""
}

func (m *DiffLawsOptions) GetOurVersion() string {
	if m != nil {
		return m.OurVersion
	}
	return ""
}

func (m *DiffLawsOptions) GetTheirBranch() string {
	if m != nil {
		return m.TheirBranch
	}
	return ""
}

func (m *DiffLawsOptions) GetTheirVersion() string {
	if m != nil {
		return m.TheirVersion
	}
	return ""
}

type DiffLawsRequest struct {
	Upstream string           `protobuf:"bytes,1,opt,name=upstream" json:"upstream,omitempty"`
	Ident    string           `protobuf:"bytes,2,opt,name=ident" json:"ident,omitempty"`
	Opts     *DiffLawsOptions `protobuf:"bytes,3,opt,name=opts" json:"opts,omitempty"`
}

func (m *DiffLawsRequest) Reset()                    { *m = DiffLawsRequest{} }
func (m *DiffLawsRequest) String() string            { return proto.CompactTextString(m) }
func (*DiffLawsRequest) ProtoMessage()               {}
func (*DiffLawsRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{15} }

func (m *DiffLawsRequest) GetUpstream() string {
	if m != nil {
		return m.Upstream
	}
	return ""
}

func (m *DiffLawsRequest) GetIdent() string {
	if m != nil {
		return m.Ident
	}
	return ""
}

func (m *DiffLawsRequest) GetOpts() *DiffLawsOptions {
	if m != nil {
		return m.Opts
	}
	return nil
}

type DiffLawsReply struct {
	Diff   string  `protobuf:"bytes,1,opt,name=diff" json:"diff,omitempty"`
	Theirs *LawSet `protobuf:"bytes,2,opt,name=theirs" json:"theirs,omitempty"`
	Err    string  `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
}

func (m *DiffLawsReply) Reset()                    { *m = DiffLawsReply{} }
func (m *DiffLawsReply) String() string            { return proto.CompactTextString(m) }
func (*DiffLawsReply) ProtoMessage()               {}
func (*DiffLawsReply) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{16} }

func (m *DiffLawsReply) GetDiff() string {
	if m != nil {
		return m.Diff
	}
	return ""
}

func (m *DiffLawsReply) GetTheirs() *LawSet {
	if m != nil {
		return m.Theirs
	}
	return nil
}

func (m *DiffLawsReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type GetLawOptions struct {
	Branch  string `protobuf:"bytes,1,opt,name=branch" json:"branch,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Profile bool   `protobuf:"varint,3,opt,name=profile" json:"profile,omitempty"`
}

func (m *GetLawOptions) Reset()                    { *m = GetLawOptions{} }
func (m *GetLawOptions) String() string            { return proto.CompactTextString(m) }
func (*GetLawOptions) ProtoMessage()               {}
func (*GetLawOptions) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{17} }

func (m *GetLawOptions) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *GetLawOptions) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetLawOptions) GetProfile() bool {
	if m != nil {
		return m.Profile
	}
	return false
}

type GetLawRequest struct {
	Upstream string         `protobuf:"bytes,1,opt,name=upstream" json:"upstream,omitempty"`
	Ident    string         `protobuf:"bytes,2,opt,name=ident" json:"ident,omitempty"`
	Opts     *GetLawOptions `protobuf:"bytes,3,opt,name=opts" json:"opts,omitempty"`
}

func (m *GetLawRequest) Reset()                    { *m = GetLawRequest{} }
func (m *GetLawRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLawRequest) ProtoMessage()               {}
func (*GetLawRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{18} }

func (m *GetLawRequest) GetUpstream() string {
	if m != nil {
		return m.Upstream
	}
	return ""
}

func (m *GetLawRequest) GetIdent() string {
	if m != nil {
		return m.Ident
	}
	return ""
}

func (m *GetLawRequest) GetOpts() *GetLawOptions {
	if m != nil {
		return m.Opts
	}
	return nil
}

type GetLawReply struct {
	LawSet   *LawSet  `protobuf:"bytes,1,opt,name=law_set,json=lawSet" json:"law_set,omitempty"`
	Branches []string `protobuf:"bytes,2,rep,name=branches" json:"branches,omitempty"`
	Err      string   `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
}

func (m *GetLawReply) Reset()                    { *m = GetLawReply{} }
func (m *GetLawReply) String() string            { return proto.CompactTextString(m) }
func (*GetLawReply) ProtoMessage()               {}
func (*GetLawReply) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{19} }

func (m *GetLawReply) GetLawSet() *LawSet {
	if m != nil {
		return m.LawSet
	}
	return nil
}

func (m *GetLawReply) GetBranches() []string {
	if m != nil {
		return m.Branches
	}
	return nil
}

func (m *GetLawReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type ListLawsOptions struct {
	Upstream string `protobuf:"bytes,1,opt,name=upstream" json:"upstream,omitempty"`
	Ident    string `protobuf:"bytes,2,opt,name=ident" json:"ident,omitempty"`
	Branch   string `protobuf:"bytes,3,opt,name=branch" json:"branch,omitempty"`
	Username string `protobuf:"bytes,4,opt,name=username" json:"username,omitempty"`
	FromDate string `protobuf:"bytes,5,opt,name=from_date,json=fromDate" json:"from_date,omitempty"`
	ToDate   string `protobuf:"bytes,6,opt,name=to_date,json=toDate" json:"to_date,omitempty"`
	// int32 limit = 7;
	PageSize int32                       `protobuf:"varint,8,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	PageNum  int32                       `protobuf:"varint,9,opt,name=page_num,json=pageNum" json:"page_num,omitempty"`
	Desc     bool                        `protobuf:"varint,11,opt,name=desc" json:"desc,omitempty"`
	OrderBy  string                      `protobuf:"bytes,12,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Search   string                      `protobuf:"bytes,13,opt,name=search" json:"search,omitempty"`
	ReqType  ListLawsOptions_RequestType `protobuf:"varint,14,opt,name=req_type,json=reqType,enum=grpc.welaw.v1.ListLawsOptions_RequestType" json:"req_type,omitempty"`
}

func (m *ListLawsOptions) Reset()                    { *m = ListLawsOptions{} }
func (m *ListLawsOptions) String() string            { return proto.CompactTextString(m) }
func (*ListLawsOptions) ProtoMessage()               {}
func (*ListLawsOptions) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{20} }

func (m *ListLawsOptions) GetUpstream() string {
	if m != nil {
		return m.Upstream
	}
	return ""
}

func (m *ListLawsOptions) GetIdent() string {
	if m != nil {
		return m.Ident
	}
	return ""
}

func (m *ListLawsOptions) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *ListLawsOptions) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ListLawsOptions) GetFromDate() string {
	if m != nil {
		return m.FromDate
	}
	return ""
}

func (m *ListLawsOptions) GetToDate() string {
	if m != nil {
		return m.ToDate
	}
	return ""
}

func (m *ListLawsOptions) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListLawsOptions) GetPageNum() int32 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

func (m *ListLawsOptions) GetDesc() bool {
	if m != nil {
		return m.Desc
	}
	return false
}

func (m *ListLawsOptions) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func (m *ListLawsOptions) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

func (m *ListLawsOptions) GetReqType() ListLawsOptions_RequestType {
	if m != nil {
		return m.ReqType
	}
	return ListLawsOptions_USER_LAWS
}

type ListLawsRequest struct {
	Opts *ListLawsOptions `protobuf:"bytes,1,opt,name=opts" json:"opts,omitempty"`
}

func (m *ListLawsRequest) Reset()                    { *m = ListLawsRequest{} }
func (m *ListLawsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListLawsRequest) ProtoMessage()               {}
func (*ListLawsRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{21} }

func (m *ListLawsRequest) GetOpts() *ListLawsOptions {
	if m != nil {
		return m.Opts
	}
	return nil
}

type ListLawsReply struct {
	LawSets     []*LawSet `protobuf:"bytes,1,rep,name=law_sets,json=lawSets" json:"law_sets,omitempty"`
	Total       int32     `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Suggestions []string  `protobuf:"bytes,3,rep,name=suggestions" json:"suggestions,omitempty"`
	Err         string    `protobuf:"bytes,4,opt,name=err" json:"err,omitempty"`
}

func (m *ListLawsReply) Reset()                    { *m = ListLawsReply{} }
func (m *ListLawsReply) String() string            { return proto.CompactTextString(m) }
func (*ListLawsReply) ProtoMessage()               {}
func (*ListLawsReply) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{22} }

func (m *ListLawsReply) GetLawSets() []*LawSet {
	if m != nil {
		return m.LawSets
	}
	return nil
}

func (m *ListLawsReply) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListLawsReply) GetSuggestions() []string {
	if m != nil {
		return m.Suggestions
	}
	return nil
}

func (m *ListLawsReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type UpdateLawOptions struct {
	Branch  string `protobuf:"bytes,1,opt,name=branch" json:"branch,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *UpdateLawOptions) Reset()                    { *m = UpdateLawOptions{} }
func (m *UpdateLawOptions) String() string            { return proto.CompactTextString(m) }
func (*UpdateLawOptions) ProtoMessage()               {}
func (*UpdateLawOptions) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{23} }

func (m *UpdateLawOptions) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *UpdateLawOptions) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type UpdateLawRequest struct {
	Law  *Law              `protobuf:"bytes,1,opt,name=law" json:"law,omitempty"`
	Opts *UpdateLawOptions `protobuf:"bytes,2,opt,name=opts" json:"opts,omitempty"`
}

func (m *UpdateLawRequest) Reset()                    { *m = UpdateLawRequest{} }
func (m *UpdateLawRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateLawRequest) ProtoMessage()               {}
func (*UpdateLawRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{24} }

func (m *UpdateLawRequest) GetLaw() *Law {
	if m != nil {
		return m.Law
	}
	return nil
}

func (m *UpdateLawRequest) GetOpts() *UpdateLawOptions {
	if m != nil {
		return m.Opts
	}
	return nil
}

type UpdateLawReply struct {
	Err string `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *UpdateLawReply) Reset()                    { *m = UpdateLawReply{} }
func (m *UpdateLawReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateLawReply) ProtoMessage()               {}
func (*UpdateLawReply) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{25} }

func (m *UpdateLawReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*LawSet)(nil), "grpc.welaw.v1.LawSet")
	proto.RegisterType((*Author)(nil), "grpc.welaw.v1.Author")
	proto.RegisterType((*L)(nil), "grpc.welaw.v1.L")
	proto.RegisterType((*Law)(nil), "grpc.welaw.v1.Law")
	proto.RegisterType((*Branch)(nil), "grpc.welaw.v1.Branch")
	proto.RegisterType((*Version)(nil), "grpc.welaw.v1.Version")
	proto.RegisterType((*LawTag)(nil), "grpc.welaw.v1.LawTag")
	proto.RegisterType((*CreateLawOptions)(nil), "grpc.welaw.v1.CreateLawOptions")
	proto.RegisterType((*CreateLawsOptions)(nil), "grpc.welaw.v1.CreateLawsOptions")
	proto.RegisterType((*CreateLawRequest)(nil), "grpc.welaw.v1.CreateLawRequest")
	proto.RegisterType((*CreateLawReply)(nil), "grpc.welaw.v1.CreateLawReply")
	proto.RegisterType((*DeleteLawOptions)(nil), "grpc.welaw.v1.DeleteLawOptions")
	proto.RegisterType((*DeleteLawRequest)(nil), "grpc.welaw.v1.DeleteLawRequest")
	proto.RegisterType((*DeleteLawReply)(nil), "grpc.welaw.v1.DeleteLawReply")
	proto.RegisterType((*DiffLawsOptions)(nil), "grpc.welaw.v1.DiffLawsOptions")
	proto.RegisterType((*DiffLawsRequest)(nil), "grpc.welaw.v1.DiffLawsRequest")
	proto.RegisterType((*DiffLawsReply)(nil), "grpc.welaw.v1.DiffLawsReply")
	proto.RegisterType((*GetLawOptions)(nil), "grpc.welaw.v1.GetLawOptions")
	proto.RegisterType((*GetLawRequest)(nil), "grpc.welaw.v1.GetLawRequest")
	proto.RegisterType((*GetLawReply)(nil), "grpc.welaw.v1.GetLawReply")
	proto.RegisterType((*ListLawsOptions)(nil), "grpc.welaw.v1.ListLawsOptions")
	proto.RegisterType((*ListLawsRequest)(nil), "grpc.welaw.v1.ListLawsRequest")
	proto.RegisterType((*ListLawsReply)(nil), "grpc.welaw.v1.ListLawsReply")
	proto.RegisterType((*UpdateLawOptions)(nil), "grpc.welaw.v1.UpdateLawOptions")
	proto.RegisterType((*UpdateLawRequest)(nil), "grpc.welaw.v1.UpdateLawRequest")
	proto.RegisterType((*UpdateLawReply)(nil), "grpc.welaw.v1.UpdateLawReply")
	proto.RegisterEnum("grpc.welaw.v1.ListLawsOptions_RequestType", ListLawsOptions_RequestType_name, ListLawsOptions_RequestType_value)
}

func init() { proto.RegisterFile("api/v1/law.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 1462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xdf, 0x6e, 0xdb, 0xb6,
	0x17, 0xfe, 0x39, 0xf2, 0xdf, 0x63, 0x3b, 0x71, 0x98, 0xb6, 0x3f, 0x2d, 0xdd, 0x96, 0x54, 0xdd,
	0xb0, 0xae, 0xc0, 0x9c, 0x26, 0xe9, 0xed, 0x2e, 0xdc, 0xc4, 0x68, 0x0b, 0x78, 0xe9, 0x40, 0x27,
	0xe9, 0xc5, 0x80, 0x09, 0xb4, 0x4d, 0xcb, 0x42, 0x65, 0x4b, 0x25, 0xa9, 0x18, 0xee, 0x1b, 0x6c,
	0x7b, 0x82, 0xbd, 0xc3, 0x5e, 0x67, 0xd8, 0x23, 0x0c, 0xd8, 0x53, 0x0c, 0xfc, 0x23, 0x5b, 0x52,
	0x9d, 0xae, 0x4d, 0x2f, 0xb7, 0x3b, 0x9e, 0x8f, 0x87, 0x3c, 0xe7, 0x7c, 0xfc, 0xc4, 0x43, 0x1b,
	0x5a, 0x24, 0xf2, 0x0f, 0xae, 0x0e, 0x0f, 0x02, 0x32, 0x6f, 0x47, 0x2c, 0x14, 0x21, 0x6a, 0x7a,
	0x2c, 0x1a, 0xb6, 0xe7, 0x54, 0x22, 0x57, 0x87, 0xbb, 0x7b, 0x5e, 0x18, 0x7a, 0x01, 0x3d, 0x50,
	0x93, 0x83, 0x78, 0x7c, 0x20, 0xfc, 0x29, 0xe5, 0x82, 0x4c, 0x23, 0xed, 0xbf, 0xbb, 0x6d, 0x76,
	0x88, 0x39, 0x65, 0x1a, 0x72, 0xfe, 0x2c, 0x40, 0xb9, 0x47, 0xe6, 0x7d, 0x2a, 0xd0, 0x17, 0x60,
	0x05, 0x64, 0x6e, 0x17, 0xf6, 0x0b, 0x0f, 0xea, 0x47, 0xa8, 0x9d, 0xd9, 0xbb, 0xdd, 0x23, 0x73,
	0x2c, 0xa7, 0xd1, 0x37, 0x50, 0x1e, 0x30, 0x32, 0x1b, 0x4e, 0xec, 0x0d, 0xe5, 0x78, 0x3b, 0xe7,
	0xf8, 0x44, 0x4d, 0x62, 0xe3, 0x84, 0x1e, 0x41, 0xe5, 0x8a, 0x32, 0xee, 0x87, 0x33, 0xdb, 0x52,
	0xfe, 0x77, 0x72, 0xfe, 0x97, 0x7a, 0x16, 0x27, 0x6e, 0x32, 0x00, 0x89, 0xc5, 0x24, 0x64, 0x76,
	0x71, 0x6d, 0x80, 0x8e, 0x9a, 0xc4, 0xc6, 0x09, 0x7d, 0x05, 0x45, 0x59, 0x8e, 0x5d, 0x52, 0xce,
	0x3b, 0x39, 0xe7, 0x0b, 0x4e, 0x19, 0x56, 0x0e, 0xce, 0xcf, 0x05, 0x28, 0xeb, 0xb5, 0xa8, 0x05,
	0x56, 0xec, 0x8f, 0x54, 0xa5, 0x35, 0x2c, 0x87, 0x68, 0x17, 0xaa, 0xd2, 0x69, 0x46, 0xa6, 0x54,
	0xd5, 0x55, 0xc3, 0x4b, 0x1b, 0xdd, 0x82, 0x12, 0x9d, 0x12, 0x3f, 0x50, 0x05, 0xd4, 0xb0, 0x36,
	0xd0, 0x5d, 0xa8, 0x8d, 0xe3, 0x20, 0x70, 0xd5, 0x92, 0xa2, 0x5e, 0x22, 0x81, 0x33, 0xb9, 0x64,
	0x0f, 0xea, 0x91, 0x3f, 0x14, 0x31, 0xa3, 0x6e, 0xcc, 0x02, 0x95, 0x5b, 0x0d, 0x83, 0x81, 0x2e,
	0x58, 0xe0, 0xfc, 0x54, 0x84, 0x42, 0x6f, 0x4d, 0x1e, 0xff, 0x87, 0x8a, 0x8c, 0xeb, 0xfa, 0x23,
	0x93, 0x46, 0x59, 0x9a, 0xcf, 0x75, 0x82, 0x11, 0x17, 0x8c, 0x92, 0xa9, 0xc9, 0x63, 0x69, 0xcb,
	0x04, 0xfd, 0x11, 0x9d, 0x09, 0x13, 0x47, 0x1b, 0x12, 0x15, 0xbe, 0x08, 0xa8, 0x5d, 0xd6, 0xa8,
	0x32, 0x64, 0x66, 0x7c, 0x12, 0x32, 0xe1, 0xea, 0xb9, 0x8a, 0xce, 0x4c, 0x41, 0xe7, 0xca, 0x61,
	0x1f, 0xea, 0x23, 0xca, 0x87, 0xcc, 0x8f, 0x84, 0x3c, 0xb4, 0xaa, 0x72, 0x48, 0x43, 0x29, 0x05,
	0x34, 0xde, 0x47, 0x01, 0x87, 0x50, 0xd5, 0x23, 0xca, 0xed, 0xe6, 0xbe, 0x75, 0xfd, 0x82, 0xa5,
	0x5b, 0x5a, 0x34, 0x9b, 0xef, 0x27, 0x9a, 0x23, 0xa8, 0x9a, 0x21, 0xb7, 0xb7, 0x54, 0x90, 0xeb,
	0x96, 0x2c, 0xfd, 0x96, 0xca, 0x69, 0xfd, 0x83, 0x72, 0xd0, 0x43, 0x28, 0x47, 0x84, 0x49, 0x82,
	0xb7, 0xaf, 0xfd, 0x36, 0x8c, 0x87, 0x3a, 0x52, 0x16, 0xd8, 0xc8, 0x1c, 0x29, 0x0b, 0x24, 0xe3,
	0xba, 0xb0, 0xb4, 0x54, 0x40, 0x43, 0x52, 0x2c, 0xce, 0x5f, 0x16, 0x58, 0x3d, 0x32, 0xff, 0x4f,
	0x0d, 0xff, 0x02, 0x35, 0x38, 0x3f, 0x42, 0x59, 0x17, 0xb8, 0xe6, 0xb8, 0x6f, 0x43, 0x39, 0x20,
	0xf3, 0xd5, 0x69, 0x97, 0x02, 0x32, 0x7f, 0x9e, 0x51, 0x81, 0x95, 0x51, 0x01, 0x82, 0x62, 0x4a,
	0x52, 0x6a, 0xec, 0xfc, 0x56, 0x84, 0x8a, 0x29, 0x6e, 0x4d, 0x84, 0xbb, 0x50, 0x33, 0x5a, 0x5c,
	0x06, 0x31, 0x3c, 0xbf, 0x2b, 0x8e, 0xbd, 0x3a, 0x00, 0x19, 0xaa, 0xb9, 0x22, 0x1a, 0x41, 0x71,
	0x42, 0xf8, 0xc4, 0x48, 0x4d, 0x8d, 0xf3, 0x92, 0x29, 0xbf, 0x2d, 0x99, 0x16, 0x58, 0x53, 0xee,
	0x19, 0xb5, 0xc9, 0xa1, 0xdc, 0x67, 0x10, 0x8e, 0x16, 0x46, 0x5f, 0x6a, 0x2c, 0x15, 0x1b, 0x90,
	0x01, 0x0d, 0xec, 0x5a, 0x42, 0xc6, 0x80, 0x06, 0xe8, 0x5b, 0x68, 0x44, 0xf1, 0x20, 0xf0, 0xf9,
	0x84, 0x8e, 0x5c, 0x22, 0xec, 0xba, 0x3a, 0x83, 0xdd, 0xb6, 0x6e, 0x7d, 0xed, 0xa4, 0xf5, 0xb5,
	0xcf, 0x93, 0xd6, 0x87, 0xeb, 0x4b, 0xff, 0x8e, 0x40, 0x5f, 0x43, 0x51, 0x10, 0x8f, 0xdb, 0x8d,
	0xb5, 0xd2, 0xeb, 0x91, 0xf9, 0x39, 0xf1, 0xb0, 0x72, 0x41, 0x3b, 0x50, 0x12, 0xc4, 0x73, 0x0f,
	0xed, 0xa6, 0x4e, 0x4a, 0x10, 0xef, 0x30, 0x01, 0x8f, 0x94, 0x12, 0x35, 0x78, 0x94, 0x80, 0xc7,
	0xf6, 0xd6, 0x12, 0x3c, 0x4e, 0xc0, 0xc7, 0x4a, 0x50, 0x1a, 0x7c, 0x2c, 0xeb, 0x5c, 0x90, 0x05,
	0x57, 0xca, 0x29, 0x61, 0x35, 0xd6, 0xa7, 0xb8, 0xe0, 0x4a, 0x24, 0x25, 0xac, 0xc6, 0xf2, 0x9c,
	0x26, 0x84, 0xbb, 0x57, 0xa1, 0xa0, 0x23, 0x7b, 0x67, 0xbf, 0xf0, 0xa0, 0x8a, 0xab, 0x13, 0xc2,
	0x2f, 0xa5, 0x8d, 0xbe, 0x84, 0xcd, 0xe4, 0x63, 0x77, 0x3d, 0x16, 0xc6, 0x91, 0x7d, 0x4b, 0x85,
	0x68, 0x26, 0xe8, 0x53, 0x09, 0xa2, 0xfb, 0xd0, 0x1c, 0x86, 0xd3, 0x29, 0x9d, 0x09, 0x77, 0x18,
	0xc6, 0x33, 0x61, 0xdf, 0x56, 0x01, 0x1a, 0x06, 0x3c, 0x91, 0x98, 0xf3, 0xbb, 0x6e, 0xff, 0xe7,
	0xc4, 0x5b, 0xdd, 0x1b, 0x85, 0xf4, 0xbd, 0x61, 0x43, 0x85, 0x91, 0xd9, 0x2b, 0x7f, 0xe6, 0x29,
	0xbd, 0x94, 0x70, 0x62, 0xca, 0xbb, 0x63, 0x16, 0x4f, 0x07, 0x94, 0xb9, 0x62, 0x11, 0x51, 0x25,
	0x99, 0x2a, 0x06, 0x0d, 0x9d, 0x2f, 0x22, 0xba, 0x4e, 0x9e, 0xe8, 0x1e, 0x34, 0xb8, 0x60, 0xfe,
	0xcc, 0x73, 0xaf, 0x48, 0x10, 0x53, 0x23, 0x9c, 0xba, 0xc6, 0x2e, 0x25, 0x24, 0x5d, 0xcc, 0xbe,
	0xda, 0xa5, 0xac, 0xc2, 0x9a, 0x58, 0xda, 0x25, 0x27, 0xb1, 0xca, 0x5b, 0x12, 0x73, 0x4e, 0xa1,
	0x75, 0xc2, 0x28, 0x11, 0xb4, 0x47, 0xe6, 0x2f, 0x14, 0xc4, 0xd1, 0x9d, 0xe5, 0x4d, 0xa5, 0x2b,
	0x4c, 0xae, 0xa4, 0x94, 0xbc, 0x37, 0x32, 0xf2, 0x76, 0xba, 0xb0, 0xbd, 0xdc, 0x85, 0xdf, 0x7c,
	0x9b, 0x79, 0x2a, 0x19, 0x4c, 0x5f, 0xc7, 0x94, 0x0b, 0xd4, 0x86, 0x8a, 0xfc, 0xd6, 0x39, 0x15,
	0xe6, 0xc1, 0xb5, 0x46, 0x8b, 0x7d, 0x2a, 0xb0, 0xbc, 0x11, 0xe4, 0xe3, 0xec, 0x18, 0x8a, 0x61,
	0x24, 0xb8, 0x79, 0x74, 0xed, 0xe5, 0x9c, 0xf3, 0xb5, 0x62, 0xe5, 0xec, 0x60, 0xd8, 0x4c, 0x05,
	0x8e, 0x82, 0xc5, 0x07, 0x87, 0x6d, 0x81, 0x45, 0x19, 0x33, 0x57, 0x85, 0x1c, 0x4a, 0x66, 0x4f,
	0x69, 0x40, 0x6f, 0xc2, 0x6c, 0x6d, 0x45, 0xc9, 0x22, 0xb5, 0x4b, 0x42, 0x49, 0xba, 0xa9, 0x15,
	0xae, 0x6b, 0x6a, 0x1b, 0x69, 0x71, 0x26, 0xa4, 0x58, 0x6b, 0x49, 0xc9, 0xa7, 0x69, 0x48, 0x71,
	0x60, 0x33, 0x15, 0x5a, 0x92, 0x62, 0x8a, 0x2c, 0xac, 0x8a, 0xfc, 0xb5, 0x00, 0x5b, 0xa7, 0xfe,
	0x78, 0x9c, 0x3e, 0xf7, 0xcf, 0x00, 0xc2, 0x98, 0xb9, 0x99, 0x42, 0x6b, 0x61, 0xcc, 0xcc, 0x75,
	0xbe, 0x07, 0x75, 0x39, 0x9d, 0xad, 0x57, 0xae, 0x48, 0x6e, 0xe3, 0x7b, 0xd0, 0x10, 0x13, 0xea,
	0x2f, 0x77, 0xd0, 0x77, 0x6c, 0x5d, 0x61, 0x66, 0x8f, 0xfb, 0xd0, 0xd4, 0x2e, 0xe9, 0xeb, 0xb6,
	0x86, 0xf5, 0xba, 0xcb, 0xa5, 0x9a, 0x96, 0xa9, 0xdd, 0x9c, 0xb9, 0xa3, 0x0c, 0x73, 0x9f, 0xe7,
	0x99, 0xcb, 0x96, 0x6e, 0x88, 0x1b, 0x41, 0x73, 0x15, 0x58, 0xf2, 0x86, 0xa0, 0x38, 0xf2, 0xc7,
	0x63, 0x13, 0x52, 0x8d, 0xe5, 0x73, 0x40, 0x65, 0xcb, 0xaf, 0xf9, 0x79, 0x90, 0xe8, 0x4b, 0x3b,
	0x25, 0xd4, 0x5b, 0x2b, 0xea, 0x7f, 0x80, 0xe6, 0x53, 0x2a, 0x3e, 0x46, 0x5c, 0x72, 0x26, 0x62,
	0xe1, 0xd8, 0x0f, 0x92, 0x5b, 0x29, 0x31, 0x1d, 0x9e, 0x6c, 0x7e, 0x73, 0xe6, 0x1e, 0x65, 0x98,
	0xfb, 0x34, 0x57, 0x5e, 0x26, 0x75, 0xc3, 0xdb, 0x2b, 0xa8, 0x27, 0x41, 0x6f, 0xf2, 0x09, 0xee,
	0xa6, 0x5e, 0x4c, 0x1b, 0xfb, 0xd6, 0xaa, 0x65, 0xd3, 0x75, 0xf4, 0xfd, 0x61, 0xc1, 0x56, 0xcf,
	0xe7, 0x22, 0xad, 0xdc, 0x0f, 0x2f, 0x72, 0xc5, 0xb9, 0x95, 0xe1, 0x3c, 0xfd, 0x33, 0xa9, 0x98,
	0xfb, 0x99, 0x24, 0x7f, 0x10, 0xb1, 0x70, 0xea, 0x8e, 0x88, 0x48, 0xee, 0xf5, 0xaa, 0x04, 0x4e,
	0x89, 0xa0, 0xf2, 0x6d, 0x21, 0x42, 0x3d, 0xa5, 0x1f, 0x04, 0x65, 0x11, 0xaa, 0x89, 0xbb, 0x50,
	0x8b, 0x88, 0x47, 0x5d, 0xee, 0xbf, 0xa1, 0xaa, 0xfd, 0x97, 0x70, 0x55, 0x02, 0x7d, 0xff, 0x0d,
	0x45, 0x9f, 0x80, 0x1a, 0xbb, 0xb3, 0x78, 0xaa, 0x5e, 0x01, 0x25, 0x5c, 0x91, 0xf6, 0x59, 0x3c,
	0x55, 0xda, 0xa3, 0x7c, 0xa8, 0xfa, 0x7f, 0x15, 0xab, 0xb1, 0x74, 0x0f, 0xd9, 0x88, 0x32, 0x77,
	0xb0, 0x50, 0x8f, 0xd1, 0x1a, 0xae, 0x28, 0xfb, 0xc9, 0x42, 0x16, 0xc4, 0x29, 0x61, 0xc3, 0x89,
	0xe9, 0xe6, 0xc6, 0x42, 0x5d, 0xa8, 0x32, 0xfa, 0x5a, 0x77, 0x30, 0xd9, 0xd2, 0x37, 0x8f, 0x1e,
	0xe6, 0x4f, 0x23, 0x4b, 0x66, 0xdb, 0x28, 0x47, 0x76, 0x38, 0x5c, 0x61, 0xf4, 0xb5, 0x1c, 0x38,
	0x03, 0xa8, 0xa7, 0x70, 0xd4, 0x84, 0xda, 0x45, 0xbf, 0x8b, 0xdd, 0x5e, 0xe7, 0x65, 0xbf, 0xf5,
	0x3f, 0xb4, 0x0d, 0xcd, 0x8b, 0xef, 0xfb, 0xe7, 0xb8, 0xdb, 0xf9, 0x4e, 0x43, 0x05, 0x04, 0x50,
	0xee, 0x77, 0x3b, 0xf8, 0xe4, 0x59, 0x6b, 0x03, 0xb5, 0xa0, 0xd1, 0xeb, 0xbc, 0x74, 0x9f, 0xe0,
	0xce, 0xd9, 0xc9, 0xb3, 0x6e, 0xbf, 0x65, 0xa1, 0x1d, 0xd8, 0xd2, 0x96, 0x7b, 0xd9, 0xc5, 0xfd,
	0xe7, 0x2f, 0xce, 0xfa, 0xad, 0xa2, 0xd3, 0x5d, 0x1d, 0x6c, 0xa2, 0xde, 0xe4, 0x2b, 0x2e, 0xac,
	0xfd, 0x8a, 0x73, 0x99, 0x1b, 0x35, 0xfe, 0x52, 0x80, 0xe6, 0x6a, 0x1f, 0x29, 0xc8, 0x47, 0x50,
	0x35, 0x82, 0x94, 0x3b, 0x59, 0xd7, 0x2b, 0xb2, 0xa2, 0x15, 0xc9, 0xd5, 0x8f, 0x89, 0x50, 0x90,
	0xc0, 0x3c, 0x09, 0xb4, 0x21, 0xbb, 0x32, 0x8f, 0x3d, 0x8f, 0x72, 0x15, 0xce, 0xb6, 0x94, 0x56,
	0xd3, 0x50, 0x22, 0xd7, 0x62, 0xa6, 0x9b, 0x5c, 0x44, 0x23, 0xf2, 0x91, 0xdd, 0x64, 0x9a, 0xda,
	0x25, 0xe1, 0xe6, 0xfd, 0xfe, 0xcd, 0x78, 0x77, 0x5b, 0xcd, 0xa7, 0xb6, 0xea, 0x20, 0xa9, 0x70,
	0x6b, 0x3b, 0xc8, 0xa0, 0xac, 0x5e, 0xa2, 0xc7, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x20, 0x4b,
	0xf1, 0x5e, 0xb5, 0x11, 0x00, 0x00,
}
